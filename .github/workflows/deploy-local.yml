name: Deploy Latest Code to Local Folder on Linux Runner

# This workflow will run on 'push' events to the specified branch.
on:
  push:
    branches:
      - main 
      - beta 

jobs:
  deploy-to-linux-folder:
    # This job runs on the self-hosted runner.
    runs-on: self-hosted

    env:
      # IMPORTANT: This is the Linux path inside your Docker runner container, 
      # which maps to the Host OS Home Assistant config directory.
      DESTINATION_PATH: '/ha_config/custom_components/meraki_ha'

    steps:
      - name: Checkout repository
        # Checks out your repository code into $GITHUB_WORKSPACE.
        uses: actions/checkout@v5

      - name: Copy files to destination folder (Linux Commands)
        # We use 'bash' and rely on 'sudo' to gain write access to the Host OS volume.
        shell: bash
        env:
          # Define the destination path here to access it easily
          DEPLOY_PATH: ${{ env.DESTINATION_PATH }}
        run: |
          SourcePath="${GITHUB_WORKSPACE}"
          DestinationPath="${DEPLOY_PATH}"
          
          echo "Starting deployment..."
          echo "Source path: ${SourcePath}"
          echo "Destination path: ${DestinationPath}"

          # 1. Create the destination directory if it doesn't exist
          # Use sudo to elevate permissions for file system operations.
          if [ ! -d "${DestinationPath}" ]; then
              echo "Destination directory does not exist. Creating: ${DestinationPath}"
              sudo mkdir -p "${DestinationPath}"
          else
              echo "Destination directory already exists: ${DestinationPath}"
              # NOTE: Clearing existing content also requires sudo.
              # Uncomment and add sudo if you decide to use this block:
              # echo "Clearing existing content in ${DestinationPath}..."
              # sudo find "${DestinationPath}/" -mindepth 1 -delete 
              # echo "Existing content cleared."
          fi

          # 2. Copy all files and subdirectories from source to destination
          # Use 'sudo cp -rf' to ensure the copy operation bypasses the Host OS permission locks.
          sudo cp -rf "${SourcePath}/"* "${DestinationPath}"
          
          echo "Successfully copied latest code to ${DestinationPath}."
          echo "Deployment complete."
