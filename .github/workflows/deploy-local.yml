name: Deploy Latest Code to Local Folder on Linux Runner

# This workflow will run on 'push' events to the specified branch.
on:
  push:
    branches:
      - main 

jobs:
  deploy-to-linux-folder: # Updated job name for clarity
    # Specifies that this job should run on your custom Linux self-hosted runner.
    # The 'self-hosted' label is sufficient.
    runs-on: self-hosted

    # Define environment variables that will be available to the steps in this job.
    env:
      # IMPORTANT: This path MUST be the Linux path inside your Docker runner container.
      # Based on your setup, the volume mount is likely to:
      # /mnt/data/supervisor/homeassistant:/ha_config:rw
      # So, the target path is inside /ha_config.
      DESTINATION_PATH: '/ha_config/custom_components/meraki'

    steps:
      - name: Checkout repository
        # This action checks out code into $GITHUB_WORKSPACE (e.g., /home/runner/_work/repo/repo).
        uses: actions/checkout@v5

      - name: Copy files to destination folder (Linux Commands)
        # We change the shell to 'bash' and use standard Linux commands.
        shell: bash
        env:
          # Define the destination path here to access it easily
          DEPLOY_PATH: ${{ env.DESTINATION_PATH }}
        run: |
          # GITHUB_WORKSPACE is the source path where the repo was checked out.
          SourcePath="${GITHUB_WORKSPACE}"
          
          echo "Starting deployment..."
          echo "Source path: ${SourcePath}"
          echo "Destination path: ${DEPLOY_PATH}"

          # 1. Create the destination directory if it doesn't exist
          # 'mkdir -p' creates directories and intermediate parent directories if needed.
          if [ ! -d "${DEPLOY_PATH}" ]; then
              echo "Destination directory does not exist. Creating: ${DEPLOY_PATH}"
              mkdir -p "${DEPLOY_PATH}"
          else
              echo "Destination directory already exists: ${DEPLOY_PATH}"
              # OPTIONAL: Uncomment the following lines if you want to clear the destination folder first.
              # echo "Clearing existing content in ${DEPLOY_PATH}..."
              # find "${DEPLOY_PATH}/" -mindepth 1 -delete 
              # echo "Existing content cleared."
          fi

          # 2. Copy all files and subdirectories from source to destination
          # 'cp -rf' copies recursively (-r) and forces overwrite (-f) without prompting.
          cp -rf "${SourcePath}/"* "${DEPLOY_PATH}"
          
          echo "Successfully copied latest code to ${DEPLOY_PATH}."
          echo "Deployment complete."
